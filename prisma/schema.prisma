generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  email         String       @unique
  password      String
  name          String
  phone         String       @unique
  role          Roles        @default(SELLER)
  cars          Car[]
  status        UserStatus   @default(ACTIVE)
  typeOfAccount TypeAccount  @default(BASE)
  flaggedCar    FlaggedCar[]
  edits         NumberEdits?
}

model Car {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  year         Int
  EUR          Float
  USD          Float
  UAH          Float
  price        Float
  engine       Float
  cityLocative String
  description  String
  currency     CurrencyCar
  eurRate      Json
  usdRate      Json
  owner        User        @relation(fields: [ownerId], references: [id])
  ownerId      String      @db.ObjectId
  marka        MarkaCar    @relation(fields: [markaId], references: [id])
  markaId      String      @db.ObjectId
  model        ModelCar    @relation(fields: [modelId], references: [id])
  modelId      String      @db.ObjectId
  status       Status      @default(ACTIVE)
  view         Statistics?
}

model MarkaCar {
  id    String     @id @default(auto()) @map("_id") @db.ObjectId
  marka String     @unique
  model ModelCar[]
  car   Car[]
}

model FlaggedCar {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  year         Int
  price        Float
  engine       Float
  cityLocative String
  description  String
  currency     CurrencyCar
  owner        User        @relation(fields: [ownerId], references: [id])
  ownerId      String      @db.ObjectId
  marka        String
  model        String
  status       Status      @default(INACTIVE)
}

model Statistics {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  dayViews   Int
  monthViews Int
  totalViews Int
  car        Car    @relation(fields: [carId], references: [id])
  carId      String @unique @db.ObjectId
}

model UnknownCar {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  markaId   String? @db.ObjectId
  markaName String
  modelName String
  userEmail String
  userName  String
}

model Currency {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  currency Money  @unique
  buy      Float
  sale     Float
}

model NumberEdits {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  edit      Int
  User      User     @relation(fields: [userId], references: [id])
  userId    String   @unique @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ModelCar {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  model   String   @unique
  markaId String   @db.ObjectId
  marka   MarkaCar @relation(fields: [markaId], references: [id])
  car     Car[]
}

model EmailToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String
  emailUser String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AccessToken {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  accessToken String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Roles {
  SELLER
  BUYER
  MANAGER
  ADMIN
}

enum Money {
  USD
  EUR
}

enum CurrencyCar {
  USD
  EUR
  UAH
}

enum UserStatus {
  BANNED
  ACTIVE
}

enum TypeAccount {
  PREMIUM
  BASE
}

enum Status {
  ACTIVE
  INACTIVE
}
